#    ESPyScanner is a 
#    Copyright (C) <year>  <name of author>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

from machine import Pin,I2C
import ssd1306
from time import sleep
import network
from math import log

i2c = I2C(-1, Pin(5), Pin(4))
display = ssd1306.SSD1306_I2C(128, 32, i2c)
sta_if = network.WLAN(network.STA_IF)
sta_if.active(True)

def startup_logo():
    #bits=[1,2,4,8,16,32,64,128] #Little Endian
    bits=[128,64,32,16,8,4,2,1] #Big Edian :S
    x=0
    y=0
    
    # You can make your own bitmap logo with Image2Bitmap and import the code as a python list
    # https://github.com/FoxExe/Image2Bitmap
    LOGO=[
        0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x0A, 0xEB, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x6F, 0xB6, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xEA, 0xDB, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x7E, 0xEA, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0xAB, 0x80, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xF8, 0x00, 0x76, 0x30, 0x30, 0x15, 0x02, 0x83, 0x90, 0x6F, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x40, 0x00, 0x1A, 0x58, 0x18, 0x36, 0x03, 0x86, 0xF8, 0x77, 0xC0, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x8C, 0x00, 0x0E, 0x2C, 0x30, 0x5B, 0x82, 0x85, 0xDC, 0x5A, 0x80, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x72, 0x03, 0xC8, 0x58, 0x18, 0x60, 0xA3, 0x8E, 0x14, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xC0, 0x26, 0x5C, 0x6C, 0x28, 0xA0, 0xC2, 0x84, 0x14, 0x60, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x01, 0x67, 0x56, 0x2C, 0x30, 0xC0, 0x63, 0x0C, 0x0C, 0x70, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0xF3, 0x68, 0x66, 0x18, 0x60, 0x33, 0x86, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x10, 0x4A, 0xD6, 0x33, 0x20, 0xA0, 0x52, 0x8E, 0x80, 0x50, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x30, 0x77, 0x7A, 0x41, 0x38, 0xA0, 0x73, 0x83, 0x60, 0x65, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x60, 0xD5, 0x2C, 0x73, 0x98, 0xA0, 0x51, 0x03, 0xB0, 0x3F, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x40, 0xF7, 0xA8, 0x12, 0x80, 0xE0, 0x33, 0x80, 0xD0, 0x75, 0x80, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xC0, 0x69, 0x6C, 0x71, 0x78, 0x40, 0x42, 0x80, 0x38, 0x60, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x80, 0x3E, 0x38, 0x41, 0xA8, 0x60, 0x73, 0x80, 0x18, 0x60, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x82, 0x01, 0x5A, 0x70, 0x70, 0x80, 0x41, 0x1C, 0x0E, 0x70, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x84, 0x15, 0xB0, 0x20, 0x98, 0xE0, 0xA3, 0x84, 0x0A, 0x60, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x06, 0x0D, 0x62, 0x50, 0x50, 0xB1, 0x61, 0x0A, 0x1C, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x72, 0x07, 0xC4, 0x60, 0x68, 0x3D, 0x83, 0x0D, 0x5C, 0x6A, 0xC0, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x5A, 0x00, 0x04, 0x20, 0x30, 0x14, 0x83, 0x85, 0xE8, 0x5F, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x9F, 0x00, 0x08, 0x10, 0x18, 0x1B, 0x02, 0x81, 0x50, 0x75, 0xC0, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x9D, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x94, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x8B, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
    
    for byte in LOGO:
        for bit in bits:
            x=(x % 128) + 1
            if(x == 1):
                y=(y % 32) + 1

            if(byte & bit):
                c = 1
            else:
                c = 0
            
            display.pixel(x,y,c)
                    
    display.show()
    sleep(2)

def scan():
    # A list of base frecuencies for wify channels
    # https://en.wikipedia.org/wiki/List_of_WLAN_channels
    cf = [0,2412,2417,2422,2427,2432,2437,2442,2447,2452,2457,2462,2467,2472,2484]
    # https://en.wikipedia.org/wiki/Free-space_path_loss
    #k = 32.44 # Mhz and Km
    k = -27.55 # Mhz and m
    
    aps = sta_if.scan()
    rs=[]
    
    for ap in aps:
        # https://www.electronics-notes.com/articles/antennas-propagation/propagation-overview/free-space-path-loss.php
        # Formula based from fspl (see the link above) the fist line is without gain
        # se second one add "10db" of gain i don't really know how much gain does the esp8266 
        # antenna adds, it's supposed to be tx and rx antenna gain but you can play with this number
        # until starts to give you accurate results, in my case it was 10db
        #x = (abs(ap[3]) - k - 20 * log(cf[ap[2]],10)) / 20
        x = (abs(ap[3]) - k - (20 * log(cf[ap[2]],10)) - 10) / 20
        d = pow(10, x)
        rs.append([
            ap[0].decode('utf-8'),
            round(d,2),
            ap[3],
            ap[2]
        ])
    
    rs = sorted(rs, key=lambda lst: lst[1])

    return rs

startup_logo()

while(True):
    display.fill(0)
    try:
        aps = scan()
        
        ptr = 1
        
        for ap in aps[:5]:
            display.text(ap[0], 1, ptr, 1)
            ptr=ptr+8
            
        display.show()
        sleep(2)
        
        ptr = 1
        display.fill(0)
        for ap in aps[:5]:
            display.text("CH("+str(ap[3])+")", 1, ptr, 1)
            display.text(str(ap[1])+"m", 57, ptr, 1)
            ptr=ptr+8
            
        display.show()
    except:
        display.text("Error de escaneo",1,1,1)
        display.text("No AP's Cerca?",10,10,1)
        display.text(":(",58,22,1)
        display.show()

    sleep(1) #delay
